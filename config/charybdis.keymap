#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#include <dt-bindings/zmk/input_transform.h>

#define Base 0
#define Media 1
#define Nav 2
#define Mouse 3
#define Sym 4
#define Num 5
#define Fun 6
#define Button 7

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24  
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33 34 35  

&sk {
  release-after-ms = <600>;
};

&sl {
  ignore-modifiers;
};

&mt {
  flavor = "tap-preferred";
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <150>;
};

&caps_word {
  /delete-property/ ignore-modifiers;
};



/ {
  trackball_listener {
    compatible = "zmk,input-listener";
    device = <&vtrackball>;

    snipe {
      layers = <Button>;
      input-processors = <&xy_scaler 1 3>;
    };

    scroll {
      layers = <Nav>;
      input-processors = <&xy_invert (INPUT_TRANSFORM_Y_INVERT)>, <&xy_scaler 1 3>, <&x_scaler 0 1>, <&mouse_to_wheel_mapper>;
    };
  };

  xy_scaler: xy_scaler {
    compatible = "zmk,input-processor-scaler";
    #input-processor-cells = <2>;
    type = <INPUT_EV_REL>;
    codes = <INPUT_REL_X>, <INPUT_REL_Y>;
  };

  x_scaler: x_scaler {
    compatible = "zmk,input-processor-scaler";
    #input-processor-cells = <2>;
    type = <INPUT_EV_REL>;
    codes = <INPUT_REL_X>;
  };

  y_scaler: y_scaler {
    compatible = "zmk,input-processor-scaler";
    #input-processor-cells = <2>;
    type = <INPUT_EV_REL>;
    codes = <INPUT_REL_Y>;
  };

  xy_invert: xy_invert {
    compatible = "zmk,input-processor-transform";
    #input-processor-cells = <1>;
    type = <INPUT_EV_REL>;
    x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
    y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
  };

  mouse_to_wheel_mapper: mouse_to_wheel_mapper {
    compatible = "zmk,input-processor-code-mapper";
    #input-processor-cells = <0>;
    type = <INPUT_EV_REL>;
    map = <INPUT_REL_X INPUT_REL_MISC>, <INPUT_REL_Y INPUT_REL_WHEEL>;
  };

  behaviors {
    hml: hml {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <280>;
      quick-tap-ms = <150>;
      hold-trigger-key-positions = <KEYS_L THUMBS>;
      hold-trigger-on-release;
      bindings =
        <&kp>,
        <&kp>;
    };

    hmr: hmr {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <280>;
      quick-tap-ms = <150>;
      hold-trigger-key-positions = <KEYS_R THUMBS>;
      hold-trigger-on-release;
      bindings =
        <&kp>,
        <&kp>;
    };

    smart_shft: smart_shft {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&sk LSHIFT>, <&caps_word>;
      mods = <(MOD_LSFT)>;
    };
  };

  chosen {
    zmk,matrix_transform = &five_column_transform;
  };

  keymap {
    compatible = "zmk,keymap";

    Base {
      bindings = <
        &kp FSLH       &kp W          &kp F           &kp P           &kp B             &kp J    &kp L           &kp U           &kp Y          &kp SEMI
        &hml LGUI A    &hml LALT R    &hml LSHFT S    &hml LCTRL T    &kp G             &kp M    &hmr RCTRL N    &hmr RSHFT E    &hmr RALT I    &hmr LGUI O
        &kp Z          &mt LC(X) X    &mt LC(C) C     &kp D           &mt LC(V) V       &kp K    &kp H           &kp COMMA       &kp DOT        &kp Q
        pf            &kp LGUI        &smart_shft     &lt SYM SPACE     &lt NUM BACKSPACE        &mt LS(LC(LEFT_ALT)) ENTER
      >;
    };

    Mouse {
      bindings = <
        &none      &none      &none       &none       &none       &none    &none       &none       &none       &none
        &kp LGUI   &kp LALT   &kp LSHFT   &kp LCTRL   &none       &none    &mkp MB1    &mkp MB2    &mkp MB3    &none 
        &none      &none      &mo 3       &mo 2       &none       &none    &none       &none       &none       &none 
        &mkp MB1    &mkp MB2    &mkp MB3    &none       &none
      >;
    };

    Sym {
      bindings = <
        &none    &none    &kp LEFT_BRACE          &kp RIGHT_BRACE          &kp PIPE         &kp GRAVE    &kp TILDE    &kp LESS_THAN    &kp GREATER_THAN    &kp BACKSLASH        
        &none    &none    &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS    &kp COLON        &kp PLUS     &kp MINUS    &kp SLASH        &kp ASTRK           &kp SINGLE_QUOTE    
        &none    &none    &kp LEFT_BRACKET        &kp RIGHT_BRACKET        &kp QUESTION     &kp AMPS     &kp EQUAL    &kp UNDER        &kp PERIOD          &kp DOUBLE_QUOTES  
        &none                   &none                    &trans           &none        &none                                                                     
      >;
    };

    Num {
      bindings = <
        &none    &kp N7     &kp N8          &kp N9           &none            &none            &kp PG_UP          &kp UP             &kp PG_DN          &none          
        X_LM     &kp LGUI   &hml LALT N4    &hml LSHFT N5    &hml LCTRL N6    &none            &none              &hmr RCTRL LEFT    &hmr RSHFT DOWN    &hmr RALT RIGHT    &kp RGUI     
        X_LB     &none      &kp N1          &kp N2           &kp N3           &kp LC(MINUS)  &kp LC(EQUAL)    &kp HOME           &trans                &kp END            &none          
        &kp DOT         &kp N0           &kp LS(LC(LEFT_ALT))    &trans              &none
      >;
    };

    Fun {
      bindings = <
        &kp LC(LA(DEL))    &kp F7    &kp F8    &kp F9         &kp F10        &none         &none           &none           &none           &none             
        &none              &kp F4    &kp F5    &kp F6         &kp F11        &bt BT_CLR    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3   
        &none              &kp F1    &kp F2    &kp F3         &kp F12        &none         &none           &out OUT_TOG    &none           &none  
        &none     &bootloader    &sys_reset     &sys_reset    &bootloader
      >;
    };

    Button {
      bindings = <
        &kp ESCAPE    &kp Q     &kp W     &kp E     &kp R       &none      &none      &none      &none         &none     
        &kp LCTRL     &kp A     &kp S     &kp D     &kp F       &none      &mkp MB1   &mkp MB2   &mkp MB3      &none    
        &kp LSHIFT    &kp Z     &kp X     &kp C     &kp V       &kp N1     &kp N2     &kp N3     &kp N4        &kp N5
        &kp LALT  &kp SPACE &kp M       &kp T    &kp B                      
      >;
    };
  };
};
